// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Main Header Component Open How to Search page 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
        Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
    }
>
    <MemoryRouter>
        <withRouter(Connect(Header)) />
    </MemoryRouter>
</Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <MemoryRouter>
        <withRouter(Connect(Header)) />
</MemoryRouter>,
      "value": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "storeState": Object {
          "auth": Immutable.Map {
            isLoggedIn: true,
            currentUser: Immutable.Map {
                        userId: 1,
                        token: 1,
                        permissions: true,
                        depositGroups: Immutable.List [
                        ],
            },
            error: null,
            loading: false,
            loadingInit: true,
            tokens: Immutable.List [
            ],
            integrations: Immutable.Map {
            },
},
          "draftItem": Immutable.Map {
            can_admin: false,
            schema: null,
            access: null,
            created: null,
            bucket: Immutable.Map {
            },
            errors: Array [],
            schemaErrors: Array [],
            created_by: null,
            formData: null,
            metadata: Object {},
            schemas: null,
            status: null,
            workflows: Immutable.List [
            ],
            actionsLayer: false,
            workflows_items: Immutable.Map {
            },
            filePreviewEdit: Object {},
            files: Immutable.Map {
            },
            can_update: false,
            showPreviewer: false,
            links: null,
            type: null,
            filePreviewEditLayer: true,
            updated: null,
            id: "1",
            revision: null,
            loading: false,
            experiment: null,
},
        },
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <withRouter(Connect(Header)) />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
    "type": Object {
      "$$typeof": Symbol(react.provider),
      "_context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "_calculateChangedBits": null,
          "_context": [Circular],
        },
        "Provider": [Circular],
        "_calculateChangedBits": null,
        "_currentRenderer": Object {},
        "_currentRenderer2": null,
        "_currentValue": null,
        "_currentValue2": null,
        "_threadCount": 0,
      },
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <MemoryRouter>
          <withRouter(Connect(Header)) />
</MemoryRouter>,
        "value": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeState": Object {
            "auth": Immutable.Map {
              isLoggedIn: true,
              currentUser: Immutable.Map {
                            userId: 1,
                            token: 1,
                            permissions: true,
                            depositGroups: Immutable.List [
                            ],
              },
              error: null,
              loading: false,
              loadingInit: true,
              tokens: Immutable.List [
              ],
              integrations: Immutable.Map {
              },
},
            "draftItem": Immutable.Map {
              can_admin: false,
              schema: null,
              access: null,
              created: null,
              bucket: Immutable.Map {
              },
              errors: Array [],
              schemaErrors: Array [],
              created_by: null,
              formData: null,
              metadata: Object {},
              schemas: null,
              status: null,
              workflows: Immutable.List [
              ],
              actionsLayer: false,
              workflows_items: Immutable.Map {
              },
              filePreviewEdit: Object {},
              files: Immutable.Map {
              },
              can_update: false,
              showPreviewer: false,
              links: null,
              type: null,
              filePreviewEditLayer: true,
              updated: null,
              id: "1",
              revision: null,
              loading: false,
              experiment: null,
},
          },
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <withRouter(Connect(Header)) />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      "type": Object {
        "$$typeof": Symbol(react.provider),
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": [Circular],
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": null,
          "_currentValue2": null,
          "_threadCount": 0,
        },
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
